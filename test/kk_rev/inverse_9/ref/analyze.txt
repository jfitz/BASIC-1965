10 (1 2) READ N
  Origs: :start
  Dests: 20:auto
20 F(I:20) (1 4) FOR I = 1 TO N - 1
  Origs: 10:auto
  Dests: 30:fornext, 60:fornext
30 F(I:20,J:30) (1 4) FOR J = 1 TO N - 1
  Origs: 20:fornext
  Dests: 40:fornext, 50:fornext
40 F(I:20,J:30) (0 8) LET P(I, J) = I * J - INT(I * J / N) * N
  Origs: 30:fornext
  Dests: 50:auto
50 F(I:20,J:30) (0 1) NEXT J
  Origs: 30:fornext, 40:auto
  Dests: 60:auto
60 F(I:20) (0 1) NEXT I
  Origs: 20:fornext, 50:auto
  Dests: 70:auto
70 F(I:70) (1 4) FOR I = 1 TO N - 1
  Origs: 60:auto
  Dests: 80:fornext, 150:fornext
80 F(I:70,J:80) (1 4) FOR J = 1 TO N - 1
  Origs: 70:fornext
  Dests: 90:fornext, 100:fornext
90 F(I:70,J:80) (1 4) IF P(I, J) <> 1 THEN 100
  Origs: 80:fornext
  Dests: 92:auto, 100:ifthen
92 F(I:70,J:80) (0 4) PRINT I; "HAS AN INVERSE" J
  Origs: 90:auto
  Dests: 99:auto
99 F(I:70,J:80) (0 1) BREAK
  Origs: 92:auto
  Dests: 100:fornext
100 F(I:70,J:80) (0 1) NEXT J
  Origs: 80:fornext, 90:ifthen, 99:fornext
  Dests: 102:auto
102 F(I:70) (1 4) IF BROKEN() THEN 150
  Origs: 100:auto
  Dests: 110:auto, 150:ifthen
110 F(I:70) (0 3) PRINT I; "DOES NOT HAVE AN INVERSE"
  Origs: 102:auto
  Dests: 150:auto
150 F(I:70) (0 1) NEXT I
  Origs: 70:fornext, 102:ifthen, 110:auto
  Dests: 999:auto
160 (0 2) DATA 9
  Origs: 
  Dests: 
999 (0 1) END
  Origs: 150:auto
  Dests: :stop

Unreachable code:

All executable lines are reachable.

