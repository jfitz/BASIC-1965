Statistics:

Number of lines: 88
Number of valid statements: 70
Number of comments: 10
Number of executable statements: 70

Complexity:

Comment density: 0.143
Comprehension effort: 226
McCabe complexity: 21
Halstead complexity:
 length: 357
 volume: 1511.576
 difficulty: 40.031
 effort: 60510.278
 language: 0.943
 intelligence: 37.760
 time: 56.028

100 (0 1) REM THIS PROGRAM PLAYS THREE-PILE NIM, WITH RANDOM NUMBERS
  Origs: 
  Dests: 
110 (0 1) REM IN EACH PILE. PLAYER WHO CLEARS BOARD WINS.
  Origs: 
  Dests: 
120 (0 0) 
  Origs: 
  Dests: 
130 (0 1) REM INITIALIZE
  Origs: 
  Dests: 
140 F(P:140) (1 3) FOR P = 1 TO 3
  Origs: :start, 350:goto
  Dests: 150:fornext, 160:fornext
150 F(P:140) (0 5) LET N(P) = INT(10 * RND(0)) + 6
  Origs: 140:fornext
  Dests: 160:auto
160 F(P:140) (0 1) NEXT P
  Origs: 140:fornext, 150:auto
  Dests: 170:auto
170 (0 2) PRINT "INITIAL CONFIGURATION:"
  Origs: 160:auto
  Dests: 180:auto
180 (0 2) PRINT
  Origs: 170:auto
  Dests: 190:auto
190 (0 2) GOSUB 900
  Origs: 180:auto
  Dests: 220:auto, 910:gosub
200 (0 0) 
  Origs: 
  Dests: 
210 (0 1) REM OPPONENT'S MOVE
  Origs: 
  Dests: 
220 (0 2) PRINT "PILE, NUMBER TAKEN";
  Origs: 190:auto, 290:goto, 880:goto
  Dests: 230:auto
230 (2 3) INPUT P, N
  Origs: 220:auto
  Dests: 240:auto
240 (0 4) LET N(P) = N(P) - N
  Origs: 230:auto
  Dests: 250:auto
250 (1 4) IF N(P) >= 0 THEN 300
  Origs: 240:auto
  Dests: 260:auto, 300:ifthen
260 (0 2) PRINT "ILLEGAL MOVE"
  Origs: 250:auto
  Dests: 270:auto
270 (0 4) LET N(P) = N(P) + N
  Origs: 260:auto
  Dests: 280:auto
280 (0 2) PRINT
  Origs: 270:auto
  Dests: 290:auto
290 (0 3) GOTO 200
  Origs: 280:auto
  Dests: 220:goto
300 (1 6) IF N(1) + N(2) + N(3) > 0 THEN 370
  Origs: 250:ifthen
  Dests: 310:auto, 380:ifthen
310 (0 2) PRINT
  Origs: 300:auto
  Dests: 320:auto
320 (0 2) PRINT "YOU WIN *****"
  Origs: 310:auto
  Dests: 330:auto
330 (0 2) PRINT
  Origs: 320:auto, 840:goto
  Dests: 340:auto
340 (0 2) PRINT
  Origs: 330:auto
  Dests: 350:auto
350 (0 3) GOTO 140
  Origs: 340:auto
  Dests: 140:goto
360 (0 0) 
  Origs: 
  Dests: 
370 (0 1) REM SET UP BIT-PATTERNS
  Origs: 
  Dests: 
380 F(P:380) (1 3) FOR P = 1 TO 3
  Origs: 300:ifthen
  Dests: 390:fornext, 450:fornext
390 F(P:380) (0 3) LET X = N(P)
  Origs: 380:fornext
  Dests: 400:auto
400 F(P:380,J:400) (1 5) FOR J = 4 TO 1 STEP -1
  Origs: 390:auto
  Dests: 410:fornext, 440:fornext
410 F(P:380,J:400) (0 4) LET Y = INT(X / 2)
  Origs: 400:fornext
  Dests: 420:auto
420 F(P:380,J:400) (0 6) LET B(P, J) = X - 2 * Y
  Origs: 410:auto
  Dests: 430:auto
430 F(P:380,J:400) (0 3) LET X = Y
  Origs: 420:auto
  Dests: 440:auto
440 F(P:380,J:400) (0 1) NEXT J
  Origs: 400:fornext, 430:auto
  Dests: 450:auto
450 F(P:380) (0 1) NEXT P
  Origs: 380:fornext, 440:auto
  Dests: 480:auto
460 (0 0) 
  Origs: 
  Dests: 
470 (0 1) REM FIND COLUMN PARITIES
  Origs: 
  Dests: 
480 F(J:480) (1 3) FOR J = 1 TO 4
  Origs: 450:auto
  Dests: 490:fornext, 510:fornext
490 F(J:480) (0 5) LET S(J) = B(1, J) + B(2, J) + B(3, J)
  Origs: 480:fornext
  Dests: 500:auto
500 F(J:480) (0 7) LET S(J) = S(J) - 2 * INT(S(J) / 2)
  Origs: 490:auto
  Dests: 510:auto
510 F(J:480) (0 1) NEXT J
  Origs: 480:fornext, 500:auto
  Dests: 540:auto
520 (0 0) 
  Origs: 
  Dests: 
530 (0 1) REM IF ALL EVEN, MAKE RANDOM MOVE
  Origs: 
  Dests: 
540 (1 7) IF S(1) + S(2) + S(3) + S(4) > 0 THEN 610
  Origs: 510:auto
  Dests: 550:auto, 620:ifthen
550 F(P:550) (1 3) FOR P = 1 TO 3
  Origs: 540:auto
  Dests: 560:fornext, 590:fornext
560 F(P:550) (1 4) IF N(P) = 0 THEN 590
  Origs: 550:fornext
  Dests: 570:auto, 590:ifthen
570 F(P:550) (0 5) LET N = INT(N(P) * RND(0)) + 1
  Origs: 560:auto
  Dests: 580:auto
580 F(P:550) (0 2) GOTO 770
    WARNING: Transfer in/out of FOR/NEXT 780
  Origs: 570:auto
  Dests: 780:goto
590 F(P:550) (0 1) NEXT P
  Origs: 550:fornext, 560:ifthen
  Dests: 620:auto
600 (0 0) 
  Origs: 
  Dests: 
610 (0 1) REM MAKE OPTIMAL MOVE
  Origs: 
  Dests: 
620 F(J:620) (1 3) FOR J = 1 TO 4
  Origs: 540:ifthen, 590:auto
  Dests: 630:fornext, 640:fornext
630 F(J:620) (1 4) IF S(J) > 0 THEN 650
    WARNING: Transfer in/out of FOR/NEXT 650
  Origs: 620:fornext
  Dests: 640:auto, 650:ifthen
640 F(J:620) (0 1) NEXT J
  Origs: 620:fornext, 630:auto
  Dests: 650:auto
650 F(P:650) (1 3) FOR P = 1 TO 3
  Origs: 630:ifthen, 640:auto
  Dests: 660:fornext, 670:fornext
660 F(P:650) (1 4) IF B(P, J) = 1 THEN 680
    WARNING: Transfer in/out of FOR/NEXT 680
  Origs: 650:fornext
  Dests: 670:auto, 680:ifthen
670 F(P:650) (0 1) NEXT P
  Origs: 650:fornext, 660:auto
  Dests: 680:auto
680 (0 3) LET N = 0
  Origs: 660:ifthen, 670:auto
  Dests: 690:auto
690 F(J:690) (1 3) FOR J = J TO 4
  Origs: 680:auto
  Dests: 700:fornext, 750:fornext
700 F(J:690) (1 4) IF S(J) = 0 THEN 750
  Origs: 690:fornext
  Dests: 710:auto, 750:ifthen
710 F(J:690) (1 4) IF B(P, J) = 0 THEN 740
  Origs: 700:auto
  Dests: 720:auto, 740:ifthen
720 F(J:690) (0 8) LET N = N + 2 ^ (4 - J)
  Origs: 710:auto
  Dests: 730:auto
730 F(J:690) (0 2) GOTO 750
  Origs: 720:auto
  Dests: 750:goto
740 F(J:690) (0 8) LET N = N - 2 ^ (4 - J)
  Origs: 710:ifthen
  Dests: 750:auto
750 F(J:690) (0 1) NEXT J
  Origs: 690:fornext, 700:ifthen, 730:goto, 740:auto
  Dests: 780:auto
760 (0 0) 
  Origs: 
  Dests: 
770 (0 1) REM CARRY OUT MOVE
  Origs: 
  Dests: 
780 (0 2) PRINT
  Origs: 580:goto, 750:auto
  Dests: 790:auto
790 (0 5) PRINT "MY MOVE:" P; "," N
  Origs: 780:auto
  Dests: 800:auto
800 (0 2) PRINT
  Origs: 790:auto
  Dests: 810:auto
810 (0 4) LET N(P) = N(P) - N
  Origs: 800:auto
  Dests: 820:auto
820 (1 6) IF N(1) + N(2) + N(3) > 0 THEN 850
  Origs: 810:auto
  Dests: 830:auto, 850:ifthen
830 (0 2) PRINT "I WIN *****"
  Origs: 820:auto
  Dests: 840:auto
840 (0 3) GOTO 330
  Origs: 830:auto
  Dests: 330:goto
850 (0 2) PRINT "NEW CONFIGURATION:"
  Origs: 820:ifthen
  Dests: 860:auto
860 (0 2) PRINT
  Origs: 850:auto
  Dests: 870:auto
870 (0 2) GOSUB 900
  Origs: 860:auto
  Dests: 880:auto, 910:gosub
880 (0 3) GOTO 210
  Origs: 870:auto
  Dests: 220:goto
890 (0 0) 
  Origs: 
  Dests: 
900 (0 1) REM PRINT CONFIGURATION
  Origs: 
  Dests: 
910 G(910) F(P:910) (1 3) FOR P = 1 TO 3
  Origs: 190:gosub, 870:gosub
  Dests: 920:fornext, 930:fornext
920 G(910) F(P:910) (0 4) PRINT "PILE " P; N(P)
  Origs: 910:fornext
  Dests: 930:auto
930 G(910) F(P:910) (0 1) NEXT P
  Origs: 910:fornext, 920:auto
  Dests: 940:auto
940 G(910) (0 2) PRINT
  Origs: 930:auto
  Dests: 950:auto
950 G(910) (0 2) PRINT
  Origs: 940:auto
  Dests: 960:auto
960 G(910) (0 1) RETURN
  Origs: 950:auto
  Dests: 
970 (0 1) END
  Origs: 
  Dests: :stop

Unreachable code:

970: END

