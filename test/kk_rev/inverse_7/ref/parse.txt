10 READ N
 Variable:N -> _
20 FOR I = 1 TO N-1
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["Variable:N -> _", "NumericConstant:1", "BinaryOperatorMinus:-(_,_) -> _"]
30 FOR J = 1 TO N-1
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["Variable:N -> _", "NumericConstant:1", "BinaryOperatorMinus:-(_,_) -> _"]
40 LET P(I,J) = I*J - INT(I*J/N)*N
 Variable:I -> _
 Variable:J -> _
 Variable:P(_,_) -> _
 Variable:I -> _
 Variable:J -> _
 BinaryOperatorMultiply:*(_,_) -> _
 Variable:I -> _
 Variable:J -> _
 BinaryOperatorMultiply:*(_,_) -> _
 Variable:N -> _
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 Variable:N -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorMinus:-(_,_) -> _
 AssignmentOperator:= _ -> _
50 NEXT J
 Variable:J -> _
60 NEXT I
 Variable:I -> _
70 FOR I = 1 TO N-1
 control: Variable:I -> _
 start:   ["NumericConstant:1"]
 end:     ["Variable:N -> _", "NumericConstant:1", "BinaryOperatorMinus:-(_,_) -> _"]
80 FOR J = 1 TO N-1
 control: Variable:J -> _
 start:   ["NumericConstant:1"]
 end:     ["Variable:N -> _", "NumericConstant:1", "BinaryOperatorMinus:-(_,_) -> _"]
90 IF P(I,J) = 1 THEN 140
 Variable:I -> _
 Variable:J -> _
 Variable:P(_,_) -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> ?
 LineNumber:140
100 NEXT J
 Variable:J -> _
110 PRINT I; "DOES NOT HAVE AN INVERSE"
 Variable:I -> _
 CarriageControl:;
 TextConstant:"DOES NOT HAVE AN INVERSE"
 CarriageControl:NL
120 NEXT I
 Variable:I -> _
130 STOP
 WARNING: Terminating statement in FOR/NEXT
 
140 PRINT I; "HAS AN INVERSE" J
 Variable:I -> _
 CarriageControl:;
 TextConstant:"HAS AN INVERSE"
 CarriageControl:
 Variable:J -> _
 CarriageControl:NL
150 GOTO 120
 LineNumber:120
160 DATA 7
 NumericConstant:7
999 END
 

