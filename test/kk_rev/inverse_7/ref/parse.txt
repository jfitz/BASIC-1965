10 READ N
 Variable:N -> .
20 FOR I = 1 TO N-1
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["Variable:N -> .", "NumericValue:1", "BinaryOperatorMinus:-(.,.) -> ."]
30 FOR J = 1 TO N-1
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["Variable:N -> .", "NumericValue:1", "BinaryOperatorMinus:-(.,.) -> ."]
40 LET P(I,J) = I*J - INT(I*J/N)*N
 Variable:I -> .
 Variable:J -> .
 Variable:P(.,.) -> .
 Variable:I -> .
 Variable:J -> .
 BinaryOperatorMultiply:*(.,.) -> .
 Variable:I -> .
 Variable:J -> .
 BinaryOperatorMultiply:*(.,.) -> .
 Variable:N -> .
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 Variable:N -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
50 NEXT J
 Variable:J -> .
60 NEXT I
 Variable:I -> .
70 FOR I = 1 TO N-1
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["Variable:N -> .", "NumericValue:1", "BinaryOperatorMinus:-(.,.) -> ."]
79 LET J0 = 0
 Variable:J0 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
80 FOR J = 1 TO N-1
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["Variable:N -> .", "NumericValue:1", "BinaryOperatorMinus:-(.,.) -> ."]
90 IF P(I,J) <> 1 THEN 100
 Variable:I -> .
 Variable:J -> .
 Variable:P(.,.) -> .
 NumericValue:1
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:100
92 PRINT I; "HAS AN INVERSE" J
 Variable:I -> .
 CarriageControl:;
 TextValue:"HAS AN INVERSE"
 CarriageControl:
 Variable:J -> .
 CarriageControl:NL
98 LET J0 = 1
 Variable:J0 -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
99 BREAK
 
100 NEXT J
 Variable:J -> .
102 IF J0 = 1 THEN 150
 Variable:J0 -> .
 NumericValue:1
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:150
110 PRINT I; "DOES NOT HAVE AN INVERSE"
 Variable:I -> .
 CarriageControl:;
 TextValue:"DOES NOT HAVE AN INVERSE"
 CarriageControl:NL
150 NEXT I
 Variable:I -> .
160 DATA 7
 NumericValue:7
999 END
 

