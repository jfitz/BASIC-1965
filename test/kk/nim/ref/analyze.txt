Statistics:

Number of lines: 88
Number of valid statements: 70
Number of comments: 10
Number of executable statements: 70

Complexity:

Comment density: 0.143
Comprehension effort: 226
McCabe complexity: 21
Halstead complexity:
 length: 357
 volume: 1511.576
 difficulty: 40.031
 effort: 60510.278
 language: 0.943
 intelligence: 37.760
 time: 56.028

(0 1) 100 REM THIS PROGRAM PLAYS THREE-PILE NIM, WITH RANDOM NUMBERS
  Origs: 
  Dests: 
(0 1) 110 REM IN EACH PILE. PLAYER WHO CLEARS BOARD WINS.
  Origs: 
  Dests: 
(0 0) 120 
  Origs: 
  Dests: 
(0 1) 130 REM INITIALIZE
  Origs: 
  Dests: 
(1 3) 140 FOR P = 1 TO 3
  Origs: :start, 350:goto
  Dests: 150:fornext, 160:fornext
(0 5) 150 LET N(P) = INT(10 * RND(0)) + 6
  Origs: 140:fornext
  Dests: 160:auto
(0 1) 160 NEXT P
  Origs: 140:fornext, 150:auto
  Dests: 170:auto
(0 2) 170 PRINT "INITIAL CONFIGURATION:"
  Origs: 160:auto
  Dests: 180:auto
(0 2) 180 PRINT
  Origs: 170:auto
  Dests: 190:auto
(0 2) 190 GOSUB 900
  Origs: 180:auto
  Dests: 220:auto, 910:gosub
(0 0) 200 
  Origs: 
  Dests: 
(0 1) 210 REM OPPONENT'S MOVE
  Origs: 290:goto
  Dests: 220:auto
(0 2) 220 PRINT "PILE, NUMBER TAKEN";
  Origs: 190:auto, 210:auto, 880:goto
  Dests: 230:auto
(2 3) 230 INPUT P, N
  Origs: 220:auto
  Dests: 240:auto
(0 4) 240 LET N(P) = N(P) - N
  Origs: 230:auto
  Dests: 250:auto
(1 4) 250 IF N(P) >= 0 THEN 300
  Origs: 240:auto
  Dests: 260:auto, 300:ifthen
(0 2) 260 PRINT "ILLEGAL MOVE"
  Origs: 250:auto
  Dests: 270:auto
(0 4) 270 LET N(P) = N(P) + N
  Origs: 260:auto
  Dests: 280:auto
(0 2) 280 PRINT
  Origs: 270:auto
  Dests: 290:auto
(0 3) 290 GOTO 200
  Origs: 280:auto
  Dests: 210:goto
(1 6) 300 IF N(1) + N(2) + N(3) > 0 THEN 370
  Origs: 250:ifthen
  Dests: 310:auto, 380:ifthen
(0 2) 310 PRINT
  Origs: 300:auto
  Dests: 320:auto
(0 2) 320 PRINT "YOU WIN *****"
  Origs: 310:auto
  Dests: 330:auto
(0 2) 330 PRINT
  Origs: 320:auto, 840:goto
  Dests: 340:auto
(0 2) 340 PRINT
  Origs: 330:auto
  Dests: 350:auto
(0 3) 350 GOTO 140
  Origs: 340:auto
  Dests: 140:goto
(0 0) 360 
  Origs: 
  Dests: 
(0 1) 370 REM SET UP BIT-PATTERNS
  Origs: 
  Dests: 
(1 3) 380 FOR P = 1 TO 3
  Origs: 300:ifthen
  Dests: 390:fornext, 450:fornext
(0 3) 390 LET X = N(P)
  Origs: 380:fornext
  Dests: 400:auto
(1 5) 400 FOR J = 4 TO 1 STEP -1
  Origs: 390:auto
  Dests: 410:fornext, 440:fornext
(0 4) 410 LET Y = INT(X / 2)
  Origs: 400:fornext
  Dests: 420:auto
(0 6) 420 LET B(P, J) = X - 2 * Y
  Origs: 410:auto
  Dests: 430:auto
(0 3) 430 LET X = Y
  Origs: 420:auto
  Dests: 440:auto
(0 1) 440 NEXT J
  Origs: 400:fornext, 430:auto
  Dests: 450:auto
(0 1) 450 NEXT P
  Origs: 380:fornext, 440:auto
  Dests: 480:auto
(0 0) 460 
  Origs: 
  Dests: 
(0 1) 470 REM FIND COLUMN PARITIES
  Origs: 
  Dests: 
(1 3) 480 FOR J = 1 TO 4
  Origs: 450:auto
  Dests: 490:fornext, 510:fornext
(0 5) 490 LET S(J) = B(1, J) + B(2, J) + B(3, J)
  Origs: 480:fornext
  Dests: 500:auto
(0 7) 500 LET S(J) = S(J) - 2 * INT(S(J) / 2)
  Origs: 490:auto
  Dests: 510:auto
(0 1) 510 NEXT J
  Origs: 480:fornext, 500:auto
  Dests: 540:auto
(0 0) 520 
  Origs: 
  Dests: 
(0 1) 530 REM IF ALL EVEN, MAKE RANDOM MOVE
  Origs: 
  Dests: 
(1 7) 540 IF S(1) + S(2) + S(3) + S(4) > 0 THEN 610
  Origs: 510:auto
  Dests: 550:auto, 620:ifthen
(1 3) 550 FOR P = 1 TO 3
  Origs: 540:auto
  Dests: 560:fornext, 590:fornext
(1 4) 560 IF N(P) = 0 THEN 590
  Origs: 550:fornext
  Dests: 570:auto, 590:ifthen
(0 5) 570 LET N = INT(N(P) * RND(0)) + 1
  Origs: 560:auto
  Dests: 580:auto
(0 2) 580 GOTO 770
  Origs: 570:auto
  Dests: 780:goto
(0 1) 590 NEXT P
  Origs: 550:fornext, 560:ifthen
  Dests: 620:auto
(0 0) 600 
  Origs: 
  Dests: 
(0 1) 610 REM MAKE OPTIMAL MOVE
  Origs: 
  Dests: 
(1 3) 620 FOR J = 1 TO 4
  Origs: 540:ifthen, 590:auto
  Dests: 630:fornext, 640:fornext
(1 4) 630 IF S(J) > 0 THEN 650
  Origs: 620:fornext
  Dests: 640:auto, 650:ifthen
(0 1) 640 NEXT J
  Origs: 620:fornext, 630:auto
  Dests: 650:auto
(1 3) 650 FOR P = 1 TO 3
  Origs: 630:ifthen, 640:auto
  Dests: 660:fornext, 670:fornext
(1 4) 660 IF B(P, J) = 1 THEN 680
  Origs: 650:fornext
  Dests: 670:auto, 680:ifthen
(0 1) 670 NEXT P
  Origs: 650:fornext, 660:auto
  Dests: 680:auto
(0 3) 680 LET N = 0
  Origs: 660:ifthen, 670:auto
  Dests: 690:auto
(1 3) 690 FOR J = J TO 4
  Origs: 680:auto
  Dests: 700:fornext, 750:fornext
(1 4) 700 IF S(J) = 0 THEN 750
  Origs: 690:fornext
  Dests: 710:auto, 750:ifthen
(1 4) 710 IF B(P, J) = 0 THEN 740
  Origs: 700:auto
  Dests: 720:auto, 740:ifthen
(0 8) 720 LET N = N + 2 ^ (4 - J)
  Origs: 710:auto
  Dests: 730:auto
(0 2) 730 GOTO 750
  Origs: 720:auto
  Dests: 750:goto
(0 8) 740 LET N = N - 2 ^ (4 - J)
  Origs: 710:ifthen
  Dests: 750:auto
(0 1) 750 NEXT J
  Origs: 690:fornext, 700:ifthen, 730:goto, 740:auto
  Dests: 780:auto
(0 0) 760 
  Origs: 
  Dests: 
(0 1) 770 REM CARRY OUT MOVE
  Origs: 
  Dests: 
(0 2) 780 PRINT
  Origs: 580:goto, 750:auto
  Dests: 790:auto
(0 5) 790 PRINT "MY MOVE:" P; "," N
  Origs: 780:auto
  Dests: 800:auto
(0 2) 800 PRINT
  Origs: 790:auto
  Dests: 810:auto
(0 4) 810 LET N(P) = N(P) - N
  Origs: 800:auto
  Dests: 820:auto
(1 6) 820 IF N(1) + N(2) + N(3) > 0 THEN 850
  Origs: 810:auto
  Dests: 830:auto, 850:ifthen
(0 2) 830 PRINT "I WIN *****"
  Origs: 820:auto
  Dests: 840:auto
(0 3) 840 GOTO 330
  Origs: 830:auto
  Dests: 330:goto
(0 2) 850 PRINT "NEW CONFIGURATION:"
  Origs: 820:ifthen
  Dests: 860:auto
(0 2) 860 PRINT
  Origs: 850:auto
  Dests: 870:auto
(0 2) 870 GOSUB 900
  Origs: 860:auto
  Dests: 880:auto, 910:gosub
(0 3) 880 GOTO 210
  Origs: 870:auto
  Dests: 220:goto
(0 0) 890 
  Origs: 
  Dests: 
(0 1) 900 REM PRINT CONFIGURATION
  Origs: 
  Dests: 
(910) (1 3) 910 FOR P = 1 TO 3
  Origs: 190:gosub, 870:gosub
  Dests: 920:fornext, 930:fornext
(910) (0 4) 920 PRINT "PILE " P; N(P)
  Origs: 910:fornext
  Dests: 930:auto
(910) (0 1) 930 NEXT P
  Origs: 910:fornext, 920:auto
  Dests: 940:auto
(910) (0 2) 940 PRINT
  Origs: 930:auto
  Dests: 950:auto
(910) (0 2) 950 PRINT
  Origs: 940:auto
  Dests: 960:auto
(910) (0 1) 960 RETURN
  Origs: 950:auto
  Dests: 
(0 1) 970 END
  Origs: 
  Dests: :stop

Unreachable code:

970: END

