10 REM THIS PROGRAM IS A BUBBLE SORT, WHICH PLACES THE
 RemarkToken:THIS PROGRAM IS A BUBBLE SORT, WHICH PLACES THE
20 REM VALUES IN AN ARRAY IN ASCENDING SEQUENCE
 RemarkToken:VALUES IN AN ARRAY IN ASCENDING SEQUENCE
30 REM IT IS INTENDED TO BE AN EXAMPLE AND NOT A
 RemarkToken:IT IS INTENDED TO BE AN EXAMPLE AND NOT A
40 REM SPECIFIC CASE
 RemarkToken:SPECIFIC CASE
50 REM THIS PROGRAM MAY BE CONVERTED INTO A SUBROUTINE
 RemarkToken:THIS PROGRAM MAY BE CONVERTED INTO A SUBROUTINE
60 REM FOR USE IN A LARGER PROGRAM
 RemarkToken:FOR USE IN A LARGER PROGRAM
70 REM THE ARRAY IS Z OF LENGTH N
 RemarkToken:THE ARRAY IS Z OF LENGTH N
80 REM Z IS ASSUMED TO HAVE BEEN DECLARED IN A DIM
 RemarkToken:Z IS ASSUMED TO HAVE BEEN DECLARED IN A DIM
90 REM STATEMENT AND N SET AHEAD OF TIME
 RemarkToken:STATEMENT AND N SET AHEAD OF TIME
100 LET I = N - 1
 ScalarReference:I
 ScalarValue:N
 NumericConstant:1
 BinaryOperator:-
 AssignmentOperator:=
110 FOR J = 1 TO I
 control: VariableToken:J
 start:   ["NumericConstant:1"]
 end:     ["ScalarValue:I"]
 step:    ["NumericConstant:1"]
120 LET K = J + 1
 ScalarReference:K
 ScalarValue:J
 NumericConstant:1
 BinaryOperator:+
 AssignmentOperator:=
130 FOR L = N TO K STEP -1
 control: VariableToken:L
 start:   ["ScalarValue:N"]
 end:     ["ScalarValue:K"]
 step:    ["NumericConstant:1", "UnaryOperator:-"]
140 IF Z(L) > Z(J) THEN 210
 ScalarValue:L
 ScalarValue:Z
 ScalarValue:J
 ScalarValue:Z
 BinaryOperator:>
150 REM SAVE FIRST VALUE
 RemarkToken:SAVE FIRST VALUE
160 LET T = Z(L)
 ScalarReference:T
 ScalarValue:L
 ScalarValue:Z
 AssignmentOperator:=
170 LET Z(L) =Z(J)
 ScalarValue:L
 ScalarReference:Z
 ScalarValue:J
 ScalarValue:Z
 AssignmentOperator:=
180 LET Z(J) = T
 ScalarValue:J
 ScalarReference:Z
 ScalarValue:T
 AssignmentOperator:=
190 REM IF Z IS THE KEY FOR SORTING MULTIPLE
 RemarkToken:IF Z IS THE KEY FOR SORTING MULTIPLE
200 REM ARRAYS AND EXTRA CODE HERE
 RemarkToken:ARRAYS AND EXTRA CODE HERE
210 NEXT L
 VariableToken:L
220 NEXT J
 VariableToken:J
230 RETURN
 
