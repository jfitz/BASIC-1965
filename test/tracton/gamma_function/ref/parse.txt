10 REM THIS PROGRAM GENERATES VIA POLYNOMIAL
 Remark:THIS PROGRAM GENERATES VIA POLYNOMIAL
20 REM APPROXIMATION THE GAMMA FUNCTION
 Remark:APPROXIMATION THE GAMMA FUNCTION
30 REM AND THE GENERALIZED FACTORIALS
 Remark:AND THE GENERALIZED FACTORIALS
40 LET A = 0.57717
 Variable:A -> _
 NumericValue:0.57717
 AssignmentOperator:= =_ -> _
50 LET B = 0.98821
 Variable:B -> _
 NumericValue:0.98821
 AssignmentOperator:= =_ -> _
60 LET C = 0.89706
 Variable:C -> _
 NumericValue:0.89706
 AssignmentOperator:= =_ -> _
70 LET D = 0.91821
 Variable:D -> _
 NumericValue:0.91821
 AssignmentOperator:= =_ -> _
80 LET E = 0.7567
 Variable:E -> _
 NumericValue:0.7567
 AssignmentOperator:= =_ -> _
90 LET F = 0.4822
 Variable:F -> _
 NumericValue:0.4822
 AssignmentOperator:= =_ -> _
100 LET G = 0.19353
 Variable:G -> _
 NumericValue:0.19353
 AssignmentOperator:= =_ -> _
110 LET H = 0.03587
 Variable:H -> _
 NumericValue:0.03587
 AssignmentOperator:= =_ -> _
120 PRINT "TYPE G FOR GAMMA FUNCTION OR"
 TextValue:"TYPE G FOR GAMMA FUNCTION OR"
 CarriageControl:NL
130 PRINT "TYPE F FOR THE GENERALIZED FACTORIAL"
 TextValue:"TYPE F FOR THE GENERALIZED FACTORIAL"
 CarriageControl:NL
140 INPUT A$
 ERROR: Syntax error: "A$" Token 'InvalidToken:$' is not a value or operator
150 IF A$ = "G" THEN 190
 ERROR: Token 'InvalidToken:$' is not a value or operator
 LineNumber:190
160 IF A$ = "F" THEN 300
 ERROR: Token 'InvalidToken:$' is not a value or operator
 LineNumber:300
170 PRINT "INVALID RESPONSE"
 TextValue:"INVALID RESPONSE"
 CarriageControl:NL
180 GOTO 120
 LineNumber:120
190 PRINT "ENTER VALUE OF X"
 TextValue:"ENTER VALUE OF X"
 CarriageControl:NL
200 INPUT X
 Variable:X -> _
210 LET K = X
 Variable:K -> _
 Variable:X -> _
 AssignmentOperator:= _ -> _
220 LET K = K - 1
 Variable:K -> _
 Variable:K -> _
 NumericValue:1
 BinaryOperatorMinus:-(_,_) -> _
 AssignmentOperator:= _ -> _
230 IF K > = 0 THEN 260
 Variable:K -> _
 NumericValue:0
 BinaryOperatorGreaterEqual:>=(_,_) -> ?
 LineNumber:260
240 PRINT "X MUST BE EQUAL TO OR GREATER THAN 1"
 TextValue:"X MUST BE EQUAL TO OR GREATER THAN 1"
 CarriageControl:NL
250 GOTO 190
 LineNumber:190
260 GOSUB 490
 LineNumber:490
270 IF (X - 1) = INT(X - 1) THEN 410
 Variable:X -> _
 NumericValue:1
 BinaryOperatorMinus:-(_,_) -> _
 Variable:X -> _
 NumericValue:1
 BinaryOperatorMinus:-(_,_) -> _
 FunctionInt:INT(_) -> _
 BinaryOperatorEqual:=(_,_) -> ?
 LineNumber:410
280 GOSUB 570
 LineNumber:570
290 GOTO 410
 LineNumber:410
300 PRINT "ENTER VALUE OF X"
 TextValue:"ENTER VALUE OF X"
 CarriageControl:NL
310 INPUT X
 Variable:X -> _
320 LET K = X
 Variable:K -> _
 Variable:X -> _
 AssignmentOperator:= _ -> _
330 IF K > = 0 THEN 360
 Variable:K -> _
 NumericValue:0
 BinaryOperatorGreaterEqual:>=(_,_) -> ?
 LineNumber:360
340 PRINT "X MUST BE GREATER THAN OR EQUAL TO 0"
 TextValue:"X MUST BE GREATER THAN OR EQUAL TO 0"
 CarriageControl:NL
350 GOTO 300
 LineNumber:300
360 GOSUB 490
 LineNumber:490
370 IF X = INT(X) THEN 390
 Variable:X -> _
 Variable:X -> _
 FunctionInt:INT(_) -> _
 BinaryOperatorEqual:=(_,_) -> ?
 LineNumber:390
380 GOSUB 570
 LineNumber:570
390 PRINT X;"! = ";K
 Variable:X -> _
 CarriageControl:;
 TextValue:"! = "
 CarriageControl:;
 Variable:K -> _
 CarriageControl:NL
400 GOTO 420
 LineNumber:420
410 PRINT "GAMMA (";X;") = ";K
 TextValue:"GAMMA ("
 CarriageControl:;
 Variable:X -> _
 CarriageControl:;
 TextValue:") = "
 CarriageControl:;
 Variable:K -> _
 CarriageControl:NL
420 PRINT
 CarriageControl:NL
430 PRINT "TO CONTINUE TYPE Y, IF NOT TYPE N"
 TextValue:"TO CONTINUE TYPE Y, IF NOT TYPE N"
 CarriageControl:NL
440 INPUT L$
 ERROR: Syntax error: "L$" Token 'InvalidToken:$' is not a value or operator
450 IF L$ = "Y" THEN 470
 ERROR: Token 'InvalidToken:$' is not a value or operator
 LineNumber:470
460 STOP
 
470 PRINT
 CarriageControl:NL
480 GOTO 120
 LineNumber:120
490 LET J = 1
 Variable:J -> _
 NumericValue:1
 AssignmentOperator:= =_ -> _
500 LET J = J*K
 Variable:J -> _
 Variable:J -> _
 Variable:K -> _
 BinaryOperatorMultiply:*(_,_) -> _
 AssignmentOperator:= _ -> _
510 LET K = K - 1
 Variable:K -> _
 Variable:K -> _
 NumericValue:1
 BinaryOperatorMinus:-(_,_) -> _
 AssignmentOperator:= _ -> _
520 IF K < 1 THEN 540
 Variable:K -> _
 NumericValue:1
 BinaryOperatorLess:<(_,_) -> ?
 LineNumber:540
530 GOTO 500
 LineNumber:500
540 LET L = K
 Variable:L -> _
 Variable:K -> _
 AssignmentOperator:= _ -> _
550 LET K = J
 Variable:K -> _
 Variable:J -> _
 AssignmentOperator:= _ -> _
560 RETURN
 
570 LET A1 = 1 + (A*L) + (B*(L^2)) + (C*(L^3))
 Variable:A1 -> _
 NumericValue:1
 Variable:A -> _
 Variable:L -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:B -> _
 Variable:L -> _
 NumericValue:2
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:C -> _
 Variable:L -> _
 NumericValue:3
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:= _ -> _
580 LET A1 = A1 + (D*(L^4)) + (E*(L^5)) + (F*(L^6))
 Variable:A1 -> _
 Variable:A1 -> _
 Variable:D -> _
 Variable:L -> _
 NumericValue:4
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:E -> _
 Variable:L -> _
 NumericValue:5
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:F -> _
 Variable:L -> _
 NumericValue:6
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:= _ -> _
590 LET A1 = A1 + (G*(L^7)) + (H*(L^8))
 Variable:A1 -> _
 Variable:A1 -> _
 Variable:G -> _
 Variable:L -> _
 NumericValue:7
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 Variable:H -> _
 Variable:L -> _
 NumericValue:8
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:= _ -> _
600 LET K = A1*K
 Variable:K -> _
 Variable:A1 -> _
 Variable:K -> _
 BinaryOperatorMultiply:*(_,_) -> _
 AssignmentOperator:= _ -> _
610 RETURN
 
620 END
 

